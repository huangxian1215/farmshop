// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: farmshop.proto

#ifndef PROTOBUF_farmshop_2eproto__INCLUDED
#define PROTOBUF_farmshop_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace farmshop {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_farmshop_2eproto();
void protobuf_InitDefaults_farmshop_2eproto();
void protobuf_AssignDesc_farmshop_2eproto();
void protobuf_ShutdownFile_farmshop_2eproto();

class ClientSession;
class LoginRequest;
class LoginResponse;
class RegistRequest;
class RegistResponse;
class baseType;

enum MsgId {
  CONNECT_REQ = 0,
  CONNECT_RES = 1,
  REGIST_REQ = 2,
  REGIST_RES = 3,
  LOGIN_REQ = 4,
  LOGIN_RES = 5,
  MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgId_IsValid(int value);
const MsgId MsgId_MIN = CONNECT_REQ;
const MsgId MsgId_MAX = LOGIN_RES;
const int MsgId_ARRAYSIZE = MsgId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgId_descriptor();
inline const ::std::string& MsgId_Name(MsgId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgId_descriptor(), value);
}
inline bool MsgId_Parse(
    const ::std::string& name, MsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgId>(
    MsgId_descriptor(), name, value);
}
// ===================================================================

class ClientSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.ClientSession) */ {
 public:
  ClientSession();
  virtual ~ClientSession();

  ClientSession(const ClientSession& from);

  inline ClientSession& operator=(const ClientSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSession& default_instance();

  static const ClientSession* internal_default_instance();

  void Swap(ClientSession* other);

  // implements Message ----------------------------------------------

  inline ClientSession* New() const { return New(NULL); }

  ClientSession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSession& from);
  void MergeFrom(const ClientSession& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSession* other);
  void UnsafeMergeFrom(const ClientSession& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:farmshop.ClientSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sessionid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientSession> ClientSession_default_instance_;

// -------------------------------------------------------------------

class baseType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.baseType) */ {
 public:
  baseType();
  virtual ~baseType();

  baseType(const baseType& from);

  inline baseType& operator=(const baseType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baseType& default_instance();

  static const baseType* internal_default_instance();

  void Swap(baseType* other);

  // implements Message ----------------------------------------------

  inline baseType* New() const { return New(NULL); }

  baseType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baseType& from);
  void MergeFrom(const baseType& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(baseType* other);
  void UnsafeMergeFrom(const baseType& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .farmshop.MsgId type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::farmshop::MsgId type() const;
  void set_type(::farmshop::MsgId value);

  // optional string sessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // repeated .google.protobuf.Any object = 3;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::google::protobuf::Any& object(int index) const;
  ::google::protobuf::Any* mutable_object(int index);
  ::google::protobuf::Any* add_object();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_object();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      object() const;

  // @@protoc_insertion_point(class_scope:farmshop.baseType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > object_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<baseType> baseType_default_instance_;

// -------------------------------------------------------------------

class RegistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.RegistRequest) */ {
 public:
  RegistRequest();
  virtual ~RegistRequest();

  RegistRequest(const RegistRequest& from);

  inline RegistRequest& operator=(const RegistRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistRequest& default_instance();

  static const RegistRequest* internal_default_instance();

  void Swap(RegistRequest* other);

  // implements Message ----------------------------------------------

  inline RegistRequest* New() const { return New(NULL); }

  RegistRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistRequest& from);
  void MergeFrom(const RegistRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegistRequest* other);
  void UnsafeMergeFrom(const RegistRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:farmshop.RegistRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegistRequest> RegistRequest_default_instance_;

// -------------------------------------------------------------------

class RegistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.RegistResponse) */ {
 public:
  RegistResponse();
  virtual ~RegistResponse();

  RegistResponse(const RegistResponse& from);

  inline RegistResponse& operator=(const RegistResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistResponse& default_instance();

  static const RegistResponse* internal_default_instance();

  void Swap(RegistResponse* other);

  // implements Message ----------------------------------------------

  inline RegistResponse* New() const { return New(NULL); }

  RegistResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistResponse& from);
  void MergeFrom(const RegistResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegistResponse* other);
  void UnsafeMergeFrom(const RegistResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:farmshop.RegistResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegistResponse> RegistResponse_default_instance_;

// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static const LoginRequest* internal_default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRequest* other);
  void UnsafeMergeFrom(const LoginRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:farmshop.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> LoginRequest_default_instance_;

// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:farmshop.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static const LoginResponse* internal_default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginResponse* other);
  void UnsafeMergeFrom(const LoginResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:farmshop.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_farmshop_2eproto_impl();
  friend void  protobuf_AddDesc_farmshop_2eproto_impl();
  friend void protobuf_AssignDesc_farmshop_2eproto();
  friend void protobuf_ShutdownFile_farmshop_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> LoginResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientSession

// optional int32 sessionId = 1;
inline void ClientSession::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 ClientSession::sessionid() const {
  // @@protoc_insertion_point(field_get:farmshop.ClientSession.sessionId)
  return sessionid_;
}
inline void ClientSession::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:farmshop.ClientSession.sessionId)
}

inline const ClientSession* ClientSession::internal_default_instance() {
  return &ClientSession_default_instance_.get();
}
// -------------------------------------------------------------------

// baseType

// optional .farmshop.MsgId type = 1;
inline void baseType::clear_type() {
  type_ = 0;
}
inline ::farmshop::MsgId baseType::type() const {
  // @@protoc_insertion_point(field_get:farmshop.baseType.type)
  return static_cast< ::farmshop::MsgId >(type_);
}
inline void baseType::set_type(::farmshop::MsgId value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:farmshop.baseType.type)
}

// optional string sessionId = 2;
inline void baseType::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& baseType::sessionid() const {
  // @@protoc_insertion_point(field_get:farmshop.baseType.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void baseType::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:farmshop.baseType.sessionId)
}
inline void baseType::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:farmshop.baseType.sessionId)
}
inline void baseType::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:farmshop.baseType.sessionId)
}
inline ::std::string* baseType::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:farmshop.baseType.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* baseType::release_sessionid() {
  // @@protoc_insertion_point(field_release:farmshop.baseType.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void baseType::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:farmshop.baseType.sessionId)
}

// repeated .google.protobuf.Any object = 3;
inline int baseType::object_size() const {
  return object_.size();
}
inline void baseType::clear_object() {
  object_.Clear();
}
inline const ::google::protobuf::Any& baseType::object(int index) const {
  // @@protoc_insertion_point(field_get:farmshop.baseType.object)
  return object_.Get(index);
}
inline ::google::protobuf::Any* baseType::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:farmshop.baseType.object)
  return object_.Mutable(index);
}
inline ::google::protobuf::Any* baseType::add_object() {
  // @@protoc_insertion_point(field_add:farmshop.baseType.object)
  return object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
baseType::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:farmshop.baseType.object)
  return &object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
baseType::object() const {
  // @@protoc_insertion_point(field_list:farmshop.baseType.object)
  return object_;
}

inline const baseType* baseType::internal_default_instance() {
  return &baseType_default_instance_.get();
}
// -------------------------------------------------------------------

// RegistRequest

// optional string name = 1;
inline void RegistRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistRequest::name() const {
  // @@protoc_insertion_point(field_get:farmshop.RegistRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:farmshop.RegistRequest.name)
}
inline void RegistRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:farmshop.RegistRequest.name)
}
inline void RegistRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:farmshop.RegistRequest.name)
}
inline ::std::string* RegistRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:farmshop.RegistRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistRequest::release_name() {
  // @@protoc_insertion_point(field_release:farmshop.RegistRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:farmshop.RegistRequest.name)
}

// optional string password = 2;
inline void RegistRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistRequest::password() const {
  // @@protoc_insertion_point(field_get:farmshop.RegistRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:farmshop.RegistRequest.password)
}
inline void RegistRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:farmshop.RegistRequest.password)
}
inline void RegistRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:farmshop.RegistRequest.password)
}
inline ::std::string* RegistRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:farmshop.RegistRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistRequest::release_password() {
  // @@protoc_insertion_point(field_release:farmshop.RegistRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:farmshop.RegistRequest.password)
}

inline const RegistRequest* RegistRequest::internal_default_instance() {
  return &RegistRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// RegistResponse

// optional int32 result = 1;
inline void RegistResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 RegistResponse::result() const {
  // @@protoc_insertion_point(field_get:farmshop.RegistResponse.result)
  return result_;
}
inline void RegistResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:farmshop.RegistResponse.result)
}

inline const RegistResponse* RegistResponse::internal_default_instance() {
  return &RegistResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// LoginRequest

// optional string name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:farmshop.LoginRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:farmshop.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:farmshop.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:farmshop.LoginRequest.name)
}
inline ::std::string* LoginRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:farmshop.LoginRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:farmshop.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:farmshop.LoginRequest.name)
}

// optional string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:farmshop.LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:farmshop.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:farmshop.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:farmshop.LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:farmshop.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:farmshop.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:farmshop.LoginRequest.password)
}

inline const LoginRequest* LoginRequest::internal_default_instance() {
  return &LoginRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// LoginResponse

// optional int32 result = 1;
inline void LoginResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:farmshop.LoginResponse.result)
  return result_;
}
inline void LoginResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:farmshop.LoginResponse.result)
}

inline const LoginResponse* LoginResponse::internal_default_instance() {
  return &LoginResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace farmshop

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::farmshop::MsgId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::farmshop::MsgId>() {
  return ::farmshop::MsgId_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_farmshop_2eproto__INCLUDED
